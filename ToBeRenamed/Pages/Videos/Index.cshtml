@page "{id:int}"
@model IndexModel
@{
    ViewData["Title"] = @Model.Video.Title;
}

<div class="container">
    <div class="row">
        <div class="col-md-7">
            <h1>Title: @Model.Video.Title</h1>
            <h4>Description: @Model.Video.Description</h4>
            <br>
            @* 1. The <iframe> (and video player) will replace this <div> tag.  *@
            <div id="player">

            </div>
        </div>
        <div class="annotations col-md-offset-1 col-md-4">
            <h3 class="text-center">Annotations</h3>
            <div class="panel panel-default annotation-wrapper">
                <div class="panel panel-heading annotation-header">
                    <span class="annotation-options glyphicon glyphicon-option-horizontal" aria-hidden="true"></span>
                    <span class="annotation-options glyphicon glyphicon glyphicon-comment" aria-hidden="true"></span>
                    <span class="annotation-author-time block">
                        Kyle Jones @@ <a href="#">2:17</a>
                    </span>
                </div>
                <div class="panel-body annotation-body">
                    <div class="annotation-text-wrapper row">
                        <span class="annotation-text">
                            This is an example of an annotation, this is what the annotation is going to look like as it gets longer and longer
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            height: '390',
            width: '640',
            videoId: '@Model.Video.Url',
            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
            }
        });
    }

    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
//        event.target.playVideo();
    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    var done = false;
    function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
            setTimeout(stopVideo, 6000);
            done = true;
        }
    }
    function stopVideo() {
        player.stopVideo();
    }
</script>

<link rel="stylesheet" href="~/css/video.css" />