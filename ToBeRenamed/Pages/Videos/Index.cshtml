@page "{id:int}"
@model IndexModel
@{
    ViewData["Title"] = @Model.Video.Title;
}

<div class="container">
    <div class="row">
        <div class="col-md-7">
            <h1>Title: @Model.Video.Title</h1>
            <h4>Description: @Model.Video.Description</h4>
            <br>
            @* 1. The <iframe> (and video player) will replace this <div> tag.  *@
            <div id="player">

            </div>
        </div>
        <div class="annotations col-md-5">
            <div class="annotations-header">
                <span id="annotations-header-text">Annotations</span>
                <button type="button" class="btn btn-primary" id="create-annotation-btn" style="float: right">Create</button>
            </div>
            <div class="create-annotation-container">
                <div class="panel panel-default annotation-wrapper">
                    <div class="panel panel-heading annotation-header">
                        <span class="annotation-options glyphicon glyphicon-option-horizontal" aria-hidden="true"></span>
                        <span class="annotation-author-time block">
                            @* TODO - Use membership display name instead of user display name *@
                            @User.Identity.Name @@ <a class="timestamp" href="#"></a>
                        </span>
                    </div>
                    <div class="panel-body annotation-body">
                        <div class="annotation-text-wrapper row">
                            <textarea></textarea>
                            <button type="button" class="btn btn-success btn-sm">Submit</button>
                            <button type="button" class="btn btn-secondary btn-sm">Cancel</button>
                        </div>
                    </div>
                </div>
                <hr>
            </div>
            @foreach (var annotation in Model.Annotations)
            {
                <div class="panel panel-default annotation-wrapper" data-id="@annotation.Id">
                    <div class="panel panel-heading annotation-header">
                        <span class="annotation-options glyphicon glyphicon-option-horizontal" aria-hidden="true"></span>
                        <span class="annotation-options glyphicon glyphicon glyphicon-comment" aria-hidden="true"></span>
                        <span class="annotation-author-time block">
                            @annotation.DisplayName @@ <a class="timestamp" href="#" data-timestamp="@annotation.Timestamp">@annotation.TimestampDisplay</a>
                        </span>
                    </div>
                    <div class="panel-body annotation-body">
                        <div class="annotation-text-wrapper row">
                            <span class="annotation-text">
                                @annotation.Comment
                            </span>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<script>
    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            height: '390',
            width: '640',
            videoId: '@Model.Video.Url',
            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
            }
        });
    }

    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
//        event.target.playVideo();
    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    var done = false;
    function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
            setTimeout(stopVideo, 6000);
            done = true;
        }
    }
    function stopVideo() {
        player.stopVideo();
    }
</script>

<script>
    var annotationsElement = document.querySelector(".annotations");
    annotationsElement.addEventListener('click', function(e) {
        var targetElement = e.target;
        
        if (targetElement.classList.contains('timestamp')) {
            var time = parseFloat(targetElement.dataset.timestamp);
            player.seekTo(time);
        }
    });
</script>

<link rel="stylesheet" href="~/css/video.css" />